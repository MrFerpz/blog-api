------- TO DO ---------
- Admin portal
    - Make users table but for posts & comments
    - Currently impossible to delete authors because of their involvement in other databases(posts, comments)
    - Clean up page refresh logic with useEffects
------- DOING ---------

------- DONE ---------
- Extract JWT verification from PostPageGet and turn into a middleware function
- Work out how to allow admins to certain pages and not others
- Change payload to be without the password
- Test database interactions - make sure posts and comment CRUDs are working
- Install vite
- Test an axios request
- Work out how to store the token on front-end / local storage, after logging in
- Work out how to send fetch requests and make sure to pass in the auth header
- Work out how the API should communicate data for best adapatation on front-end
    - axios response -> response.data -> map into constituent key/values
- Homepage grid
- Add links so it goes to a post-specific page
- Work out how to render post-specific pages
- New comment functionality
- Add sign-up form
- Add new post button
- Add profile page
- Fine-tune the styling

--- MISC LEARNINGS ---
- Install vite at the start to avoid problems
- Remember to name files as jsx...
- Host backend and frontend on different ports (make sure to install cors on backend though)
- Put fetch into useEffects so they don't run every re-render
- onSubmit only takes (e) as an arg. Pay attention to the colours in VSCode lol
- If you render an object from a fetch request, make sure to put something in the interim while you wait.
    - (if !user) return <div>Loading...</div> for example)
    - This avoids type errors / running into undefined objects

--- Reminders for when it's tough ---
- First time using Axios
- First time connecting a backend and frontend
- First time using a component library (at least properly)
